module Skelcalc where

-- Haskell module generated by the BNF converter

import Abscalc
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transClassName :: ClassName -> Result
transClassName x = case x of
  ClassName str  -> failure x


transNegative :: Negative -> Result
transNegative x = case x of
  Negative str  -> failure x


transProg :: Prog -> Result
transProg x = case x of
  Program insts  -> failure x


transType :: Type -> Result
transType x = case x of
  CustomType classname  -> failure x
  TInt  -> failure x
  TText  -> failure x
  TAny  -> failure x
  TBool  -> failure x
  TDouble  -> failure x
  TArray type' array  -> failure x


transArray :: Array -> Result
transArray x = case x of
  ArraySymbol exp  -> failure x


transInst :: Inst -> Result
transInst x = case x of
  InstrD decl  -> failure x
  InstrS stmt  -> failure x
  InstrExpr exp  -> failure x
  InstrLoop loop  -> failure x
  InstrFor for  -> failure x
  InstrFun fun  -> failure x
  InstrClass classheader  -> failure x
  IApply id1 id2  -> failure x
  IApplyAn lambda id  -> failure x
  Print exp  -> failure x
  PrintLn exp  -> failure x
  Read id  -> failure x


transDecl :: Decl -> Result
transDecl x = case x of
  Declare type' vars  -> failure x


transVar :: Var -> Result
transVar x = case x of
  VarName id  -> failure x
  VarAssin id exp  -> failure x


transStmt :: Stmt -> Result
transStmt x = case x of
  VAssin id exp  -> failure x
  FieldAssin id1 id2 exp3  -> failure x
  VAssinArrField id1 id2 exp3 elems4 exp5  -> failure x
  VAssinArr id exp1 elems2 exp3  -> failure x
  VAssinFieldArr id1 exp2 elems3 id4 exp5  -> failure x
  VAssinPlus id exp  -> failure x
  VAssinMulti id exp  -> failure x
  VAssinMinus id exp  -> failure x
  VAssinDiv id exp  -> failure x
  SIfOne exp inst elifs  -> failure x
  SIfTwo exp inst1 elifs2 inst3  -> failure x
  SIfFourMore exp inst elifs insts  -> failure x
  SIfOneMore exp insts elifs  -> failure x
  SIfTwoMore exp insts elifs inst  -> failure x
  SIfThreeMore exp insts1 elifs2 insts3  -> failure x
  Switch exp cases insts  -> failure x
  Switch2 exp cases  -> failure x


transElIf :: ElIf -> Result
transElIf x = case x of
  SElIf exp inst  -> failure x
  SElIfMore exp insts  -> failure x


transCase :: Case -> Result
transCase x = case x of
  CasesVal exp insts  -> failure x


transElem :: Elem -> Result
transElem x = case x of
  ArrElem exp  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  Etrue  -> failure x
  Efalse  -> failure x
  LogicalAnd exp1 exp2  -> failure x
  LogicalOr exp1 exp2  -> failure x
  LogicalNot exp  -> failure x
  Eeq exp1 exp2  -> failure x
  Eneq exp1 exp2  -> failure x
  ELess exp1 exp2  -> failure x
  EBigg exp1 exp2  -> failure x
  ELessEq exp1 exp2  -> failure x
  EBiggEq exp1 exp2  -> failure x
  EAdd exp1 exp2  -> failure x
  ESub exp1 exp2  -> failure x
  EMul exp1 exp2  -> failure x
  EDiv exp1 exp2  -> failure x
  EMod exp1 exp2  -> failure x
  EPow exp1 exp2  -> failure x
  ESqrt exp  -> failure x
  EAbs exp  -> failure x
  Epreinc exp  -> failure x
  Epredec exp  -> failure x
  Epostinc exp  -> failure x
  Epostdec exp  -> failure x
  ECons exps  -> failure x
  EString str  -> failure x
  EInt n  -> failure x
  EDouble d  -> failure x
  ECall call  -> failure x
  ENeg negative  -> failure x
  EScope id  -> failure x
  EObj id1 id2  -> failure x
  EVar id  -> failure x
  EArr id exp elems  -> failure x
  EFieldAr id1 exp2 elems3 id4  -> failure x
  EArrField id1 id2 exp3 elems4  -> failure x
  ELam lambda  -> failure x


transFor :: For -> Result
transFor x = case x of
  ForTo type' id exp1 exp2 inst3  -> failure x
  ForToMulti type' id exp1 exp2 insts3  -> failure x
  ForDownTo type' id exp1 exp2 inst3  -> failure x
  ForDownToMulti type' id exp1 exp2 insts3  -> failure x


transLoop :: Loop -> Result
transLoop x = case x of
  LoopInst loopvars exp loophow inst  -> failure x
  LoopInstMulti loopvars exp loophow insts  -> failure x


transLoopVars :: LoopVars -> Result
transLoopVars x = case x of
  LoopDecli loopdecls  -> failure x
  LoopDeclEps  -> failure x


transLoopHow :: LoopHow -> Result
transLoopHow x = case x of
  LoopDo iterexps  -> failure x
  LoopDoEps  -> failure x


transLoopDecl :: LoopDecl -> Result
transLoopDecl x = case x of
  DeclareLoop type' varloops  -> failure x


transVarLoop :: VarLoop -> Result
transVarLoop x = case x of
  LoopAssin id exp  -> failure x


transIterExp :: IterExp -> Result
transIterExp x = case x of
  IterExpr exp  -> failure x
  IterExpr2 loopstmt  -> failure x


transLoopStmt :: LoopStmt -> Result
transLoopStmt x = case x of
  VAssinPlusL id exp  -> failure x
  VAssinMultiL id exp  -> failure x
  VAssinMinusL id exp  -> failure x
  VAssinDivL id exp  -> failure x


transFun :: Fun -> Result
transFun x = case x of
  FunDecl id paramslist insts  -> failure x


transParamsList :: ParamsList -> Result
transParamsList x = case x of
  FunParamList funargss1 funargss2  -> failure x


transFunArgs :: FunArgs -> Result
transFunArgs x = case x of
  FunVar type' id  -> failure x
  FunFunny id paramslist  -> failure x


transFunParam :: FunParam -> Result
transFunParam x = case x of
  FunFun id paramslist  -> failure x


transCall :: Call -> Result
transCall x = case x of
  CallFun id realparams  -> failure x


transRealParam :: RealParam -> Result
transRealParam x = case x of
  RealParamVal exp  -> failure x


transLambda :: Lambda -> Result
transLambda x = case x of
  LamFun type' lambdaparamss exp  -> failure x


transLambdaParams :: LambdaParams -> Result
transLambdaParams x = case x of
  LambdaParam type' id  -> failure x


transClassHeader :: ClassHeader -> Result
transClassHeader x = case x of
  ClassDec classname classstmts  -> failure x


transClassBlock :: ClassBlock -> Result
transClassBlock x = case x of
  ClassBody classstmts  -> failure x


transClassStmt :: ClassStmt -> Result
transClassStmt x = case x of
  ClassVar decl  -> failure x



