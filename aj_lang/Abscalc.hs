module Abscalc where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
newtype ClassName = ClassName String deriving (Eq,Ord,Show)
newtype Negative = Negative String deriving (Eq,Ord,Show)
data Prog =
   Program [Inst]
  deriving (Eq,Ord,Show)

data Type =
   CustomType ClassName
 | TInt
 | TText
 | TAny
 | TBool
 | TDouble
 | TArray Type Array
 | TFun [(Ident,Type)] [(Ident,Type)]
  deriving (Eq,Ord,Show)

data Array =
   ArraySymbol Exp
  deriving (Eq,Ord,Show)

data Inst =
   InstrD Decl
 | InstrS Stmt
 | InstrExpr Exp
 | InstrLoop Loop
 | InstrFor For
 | InstrFun Fun
 | InstrClass ClassHeader
 | IApply Ident Ident
 | IApplyAn Lambda Ident
 | Print Exp
 | PrintLn Exp
 | Read Ident
  deriving (Eq,Ord,Show)

data Decl =
   Declare Type [Var]
  deriving (Eq,Ord,Show)

data Var =
   VarName Ident
 | VarAssin Ident Exp
  deriving (Eq,Ord,Show)

data Stmt =
   VAssin Ident Exp
 | FieldAssin Ident Ident Exp
 | VAssinArrField Ident Ident Exp [Elem] Exp
 | VAssinArr Ident Exp [Elem] Exp
 | VAssinFieldArr Ident Exp [Elem] Ident Exp
 | VAssinPlus Ident Exp
 | VAssinMulti Ident Exp
 | VAssinMinus Ident Exp
 | VAssinDiv Ident Exp
 | SIfOne Exp Inst [ElIf]
 | SIfTwo Exp Inst [ElIf] Inst
 | SIfFourMore Exp Inst [ElIf] [Inst]
 | SIfOneMore Exp [Inst] [ElIf]
 | SIfTwoMore Exp [Inst] [ElIf] Inst
 | SIfThreeMore Exp [Inst] [ElIf] [Inst]
 | Switch Exp [Case] [Inst]
 | Switch2 Exp [Case]
  deriving (Eq,Ord,Show)

data ElIf =
   SElIf Exp Inst
 | SElIfMore Exp [Inst]
  deriving (Eq,Ord,Show)

data Case =
   CasesVal Exp [Inst]
  deriving (Eq,Ord,Show)

data Elem =
   ArrElem Exp
  deriving (Eq,Ord,Show)

data Exp =
   Etrue
 | Efalse
 | LogicalAnd Exp Exp
 | LogicalOr Exp Exp
 | LogicalNot Exp
 | Eeq Exp Exp
 | Eneq Exp Exp
 | ELess Exp Exp
 | EBigg Exp Exp
 | ELessEq Exp Exp
 | EBiggEq Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | EMul Exp Exp
 | EDiv Exp Exp
 | EMod Exp Exp
 | EPow Exp Exp
 | ESqrt Exp
 | EAbs Exp
 | Epreinc Exp
 | Epredec Exp
 | Epostinc Exp
 | Epostdec Exp
 | ECons [Exp]
 | EString String
 | EInt Integer
 | EDouble Double
 | ECall Call
 | ENeg Negative
 | EScope Ident
 | EObj Ident Ident
 | EVar Ident
 | EArr Ident Exp [Elem]
 | EFieldAr Ident Exp [Elem] Ident
 | EArrField Ident Ident Exp [Elem]
 | ELam Lambda
  deriving (Eq,Ord,Show)

data For =
   ForTo Type Ident Exp Exp Inst
 | ForToMulti Type Ident Exp Exp [Inst]
 | ForDownTo Type Ident Exp Exp Inst
 | ForDownToMulti Type Ident Exp Exp [Inst]
  deriving (Eq,Ord,Show)

data Loop =
   LoopInst LoopVars Exp LoopHow Inst
 | LoopInstMulti LoopVars Exp LoopHow [Inst]
  deriving (Eq,Ord,Show)

data LoopVars =
   LoopDecli [LoopDecl]
 | LoopDeclEps
  deriving (Eq,Ord,Show)

data LoopHow =
   LoopDo [IterExp]
 | LoopDoEps
  deriving (Eq,Ord,Show)

data LoopDecl =
   DeclareLoop Type [VarLoop]
  deriving (Eq,Ord,Show)

data VarLoop =
   LoopAssin Ident Exp
  deriving (Eq,Ord,Show)

data IterExp =
   IterExpr Exp
 | IterExpr2 LoopStmt
  deriving (Eq,Ord,Show)

data LoopStmt =
   VAssinPlusL Ident Exp
 | VAssinMultiL Ident Exp
 | VAssinMinusL Ident Exp
 | VAssinDivL Ident Exp
  deriving (Eq,Ord,Show)

data Fun =
   FunDecl Ident ParamsList [Inst]
  deriving (Eq,Ord,Show)

data ParamsList =
   FunParamList [FunArgs] [FunArgs]
  deriving (Eq,Ord,Show)

data FunArgs =
   FunVar Type Ident
 | FunFunny Ident ParamsList
  deriving (Eq,Ord,Show)

data FunParam =
   FunFun Ident ParamsList
  deriving (Eq,Ord,Show)

data Call =
   CallFun Ident [RealParam]
  deriving (Eq,Ord,Show)

data RealParam =
   RealParamVal Exp
  deriving (Eq,Ord,Show)

data Lambda =
   LamFun Type [LambdaParams] Exp
  deriving (Eq,Ord,Show)

data LambdaParams =
   LambdaParam Type Ident
  deriving (Eq,Ord,Show)

data ClassHeader =
   ClassDec ClassName [ClassStmt]
  deriving (Eq,Ord,Show)

data ClassBlock =
   ClassBody [ClassStmt]
  deriving (Eq,Ord,Show)

data ClassStmt =
   ClassVar Decl
  deriving (Eq,Ord,Show)
